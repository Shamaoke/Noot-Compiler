L0:     PUSH         1         ; Declaring INT a
        PUSH         1         ; Declaring INT b
        PUSH         1         ; Declaring INT c
        PUSH         1         ; Declaring INT d
        PUSH         1         ; Declaring INT l
        PUSH         1         ; Declaring CHAR e
        PUSH         1         ; Declaring BOOL f
        PUSH         1         ; Declaring BOOL g
        PUSH         1         ; Declaring BOOL k
        LOAD(1)      7[SB]     ; Loading g
        LOADL        1         ; True Boolean
        LOADL        1
        CALL         eq
        JUMPIF(0)    L1[CB]    ; If (jump to else)
        PUSH         1         ; Declaring INT i
        PUSH         1         ; Declaring INT j
        LOADL        5
        STORE(1)     10[SB]    ; Assigning j
        LOAD(1)      10[SB]    ; Loading j
        LOAD(1)      9[SB]     ; Loading i
        CALL         gt        ; Greater than
        JUMP         L2[CB]    ; Else (jump over else)
L1:     LOADL        0         ; False Boolean
L2:     STORE(1)     8[SB]     ; Assigning k
        LOADL        1         ; True Boolean
        STORE(1)     8[SB]     ; Assigning k
L3:     LOAD(1)      8[SB]     ; Loading k
        LOADL        1         ; True Boolean
        LOADL        1
        CALL         eq
        JUMPIF(0)    L5[CB]    ; While (jump out)
        PUSH         1         ; Pushing for helper register 
        LOAD(1)      4[SB]     ; Loading l
        LOADL        1
        CALL         add       ; Adition
        STORE(1)     11[SB]    ; Assigning temp
        LOAD(1)      11[SB]    ; Loading temp
        CALL         putint    ; Print int
        CALL         puteol
        LOAD(1)      11[SB]    ; Loading temp
        STORE(1)     4[SB]     ; Assigning l
        LOAD(1)      4[SB]     ; Loading l
        LOADL        10
        CALL         gt        ; Greater than
        JUMPIF(0)    L4[CB]    ; If (jump to else)
        LOADL        0         ; False Boolean
        STORE(1)     8[SB]     ; Assigning k
L4:     JUMP         L3[CB]    ; Looping back
L5:     POP(0)       12
        HALT                   ; Generated by the Noot Compiler (2013/07/08 10:59)
