package noot.assembly;

import noot.ast.*;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;

public class Program extends ArrayList<InstructionBlock> {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	private InstructionBlock currentBlock = new InstructionBlock(0);;
	private ArrayList<DeclarationNode> declarations = new ArrayList<DeclarationNode>();
	private Instruction lastPushedInstruction;

	public InstructionBlock blockWithLabel(String label)
	{
		for(InstructionBlock block : this)
			if(block.referenceLabel().equals(label)) return block;
		return null;
	}
	
	public String addressOfIdentifier(IdentifierNode node)
	{
		int index = declarations.indexOf(node.getDeclarationNode());
		
		if(index < 0)
			return null;
		else
		{
			return Integer.toString(index)+"[SB]";
		}
		
	}

	public boolean add(InstructionBlock block) 
	{
		block.finalizeBlock();
		
		if(block == currentBlock)
			currentBlock = new InstructionBlock(block.labelIdentifier + 1);
		
		return super.add(block);
	}
	
	public void pushBlock()
	{
		if(this.currentBlock.size() > 0)
			this.add(this.currentBlock);
	}

	public void pushInstruction(Instruction instruction)
	{
		currentBlock.add(instruction);
		lastPushedInstruction = instruction;
	}
	
	public Instruction getLastPushedInstruction()
	{
		return lastPushedInstruction;
	}

	public int pushCount()
	{
		int result = 0;

		for(InstructionBlock block : this)
		{
			//for(Instruction instruction : block)
			//	if(instruction.instruction.equalsIgnoreCase("PUSH")) result += Integer.parseInt(instruction.argument);
		}

		return result;
	}

	public void finalize()
	{
		currentBlock.add(new Instruction("POP", Integer.toString(this.pushCount()),0));
		
		DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm");
		Date date = new Date();
		
		Instruction haltInstruction = new Instruction("HALT");
		haltInstruction.setComment("Generated by the Noot Compiler ("+dateFormat.format(date)+")");
		
		currentBlock.add(haltInstruction);

		this.add(currentBlock);
		
		for(InstructionBlock block : this)
		{
			for(Instruction instruction : block)
				System.out.print(instruction.toString());
		}
	}
	
	public InstructionBlock getCurrentBlock() {
		return currentBlock;
	}

	public ArrayList<DeclarationNode> getDeclarations() {
		return declarations;
	}

}
