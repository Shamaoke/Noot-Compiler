package noot.compiler;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Stack;

import noot.assembly.Instruction;
import noot.assembly.InstructionBlock;
import noot.assembly.MemoryLocation;
import noot.ast.DeclarationNode;
import noot.ast.IdentifierNode;

public class GeneratorHelper extends ScopeHelper {
	
	private Stack<ArrayList<MemoryLocation>> memoryScopingStack = new Stack<ArrayList<MemoryLocation>>();
	
	private Stack<InstructionBlock> instructionBlockStack = new Stack<InstructionBlock>();
	
	public GeneratorHelper()
	{
		this.openScope();
		
		instructionBlockStack.push(new InstructionBlock(0));
	}

	public void pushBlock()
	{
		if(this.instructionBlockStack.peek().size() > 0)
		{
			instructionBlockStack.push(new InstructionBlock(currentBlock().labelIdentifier + 1));
		}
	}
	
	public void pushInstructionsForPrintingString(String s)
	{
		for (int i = 0; i < s.length(); i++)
		{
            char c = s.charAt(i);        
            currentBlock().push(new Instruction("LOADL",Integer.toString(c),"Loading character"));
            currentBlock().push(new Instruction("CALL","put","Print character"));
        }
	}
	
	public void finalizeAndPrintInstructions() throws NootException
	{
		if(this.scopingLevel() != 1)
			throw new GeneratorException("Finalizing program when not all scopes have been closed");
			
		this.closeScope();
		
		DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm");
		Date date = new Date();
		
		Instruction haltInstruction = new Instruction("HALT");
		haltInstruction.setComment("Generated by the Noot Compiler ("+dateFormat.format(date)+")");
		
		currentBlock().push(haltInstruction);
		
		pushBlock();
		
		
		for(InstructionBlock block : instructionBlockStack)
		{
			for(Instruction instruction : block)
				System.out.print(instruction.toString());
		}
	}
	
	public void declare(DeclarationNode declaration)
	{
		IdentifierNode in = declaration.getIdentifierNode();
		
		if(in == null) // Used for easy debugging an invalid AST
			throw new NullPointerException("Declaration on line " + declaration.getLine() + " does not have an identifer.");
		
		MemoryLocation ml = new MemoryLocation(declaration);
		memoryScopingStack.peek().add(ml);
		
		currentBlock().push(new Instruction("PUSH","1","Declaring "+in.getNodeType()+" "+in.getText()));
	}
	
	public void deallocHelperRegister(MemoryLocation ma) throws GeneratorException
	{
		if(memoryScopingStack.peek().contains(ma))
		{
			currentBlock().push(new Instruction("POP","1",0,"Popping helper register"));
			memoryScopingStack.peek().remove(ma);
		}
		else
		{
			throw new GeneratorException("Dealloc failed, not allocated within this scope");
		}
	}
	
	public MemoryLocation allocHelperRegister()
	{
		currentBlock().push(new Instruction("PUSH","1","Pushing for helper register "));
		
		MemoryLocation ml = new MemoryLocation();
		memoryScopingStack.peek().add(ml);
		
		return ml;
	}
	
	public String addressOfIdentifier(IdentifierNode node) throws GeneratorException
	{
		String result = null;
		int index = 0;
		
		for (ArrayList<MemoryLocation> memoryLocationsOfScope : memoryScopingStack)
		{
			for(MemoryLocation ml : memoryLocationsOfScope)
			{
				DeclarationNode dc = ml.getDeclaration();
				
				if(dc != null && node.getDeclarationNode() == dc)
				{
					result = index + "[SB]";
				}
				
				index++;
			}
		}
		
		if(result == null)
			throw new GeneratorException("MemoryLocation is not allocated");
		
		return result;

	}
	
	public String addressOfMemoryLocation(MemoryLocation ml) throws GeneratorException
	{
		String result = null;
		int index = 0;
		
		for (ArrayList<MemoryLocation> memoryLocationsOfScope : memoryScopingStack)
		{
			for(MemoryLocation mlr : memoryLocationsOfScope)
			{
				if(mlr == ml) 
				{
					result = index + "[SB]";
				}
				
				index++;
			}
		}
		
		if(result == null)
			throw new GeneratorException("MemoryLocation is not allocated");
		
		return result;
	}
	
	public InstructionBlock currentBlock() {
		return instructionBlockStack.peek();
	}
	
	public void openScope()
	{
		super.openScope();
		memoryScopingStack.push(new ArrayList<MemoryLocation>());
	}

	protected void closeScope() throws NootException
	{
		super.closeScope();
		
		for (MemoryLocation ml : memoryScopingStack.peek())
		{
			DeclarationNode dc = ml.getDeclaration();
			
			if(dc != null)
			{
				IdentifierNode in = dc.getIdentifierNode();
				
				if(in == null) // Used for easy debugging an invalid AST
					throw new NullPointerException("Declaration on line " + dc.getLine() + " does not have an identifer.");
				
				currentBlock().push(new Instruction("POP","1",0,"Popping "+in.getNodeType()+" "+in.getText()));
			}
			else
			{
				
				throw new GeneratorException("Helper register still allocated when closing scope, use deallocHelperRegister(MemoryLocation ml);");
			}
			
		}
		
		memoryScopingStack.pop();
	}
}
