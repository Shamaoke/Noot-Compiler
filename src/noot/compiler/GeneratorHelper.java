/*
 * @author Thijs Scheepers <thijs@label305.com>
 * Copyright (c) 2013 Thijs Scheepers.
 *
 * This source is subject to the BSD License.
 * Please see the LICENSE file for more information.
 * All other rights reserved.
 *
 * THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY 
 * KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
 * PARTICULAR PURPOSE.
 * 
 */
package noot.compiler;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Stack;

import noot.assembly.Instruction;
import noot.assembly.InstructionBlock;
import noot.assembly.MemoryLocation;
import noot.ast.DeclarationNode;
import noot.ast.IdentifierNode;

// TODO: Auto-generated Javadoc
/**
 * The Class GeneratorHelper.
 */
public class GeneratorHelper {
	
	/** The memory locations. */
	private ArrayList<MemoryLocation> memoryLocations = new ArrayList<MemoryLocation>();
	
	/** The instruction block stack. */
	private Stack<InstructionBlock> instructionBlockStack = new Stack<InstructionBlock>();
	
	/**
	 * Instantiates a new generator helper.
	 */
	public GeneratorHelper()
	{	
		instructionBlockStack.push(new InstructionBlock(0));
	}

	/**
	 * Push block.
	 */
	public void pushBlock()
	{
		if(this.instructionBlockStack.peek().size() > 0)
		{
			instructionBlockStack.push(new InstructionBlock(currentBlock().labelIdentifier + 1));
		}
	}
	
	/**
	 * Push instructions for printing string.
	 *
	 * @param s the s
	 */
	public void pushInstructionsForPrintingString(String s)
	{
		for (int i = 0; i < s.length(); i++)
		{
            char c = s.charAt(i);        
            currentBlock().push(new Instruction("LOADL",Integer.toString(c),"Loading character"));
            currentBlock().push(new Instruction("CALL","put","Print character"));
        }
	}
	
	/**
	 * Finalize and print instructions.
	 */
	public void finalizeAndPrintInstructions()
	{
		
		int pushCount = 0;
		for(InstructionBlock ib : instructionBlockStack)
		{
			for(Instruction in : ib)
			{
				if(in.getInstruction().equals("PUSH")) pushCount ++;
			}
		}
		
		currentBlock().push(new Instruction("POP",Integer.toString(pushCount),0));
		
		DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm");
		Date date = new Date();
		
		Instruction haltInstruction = new Instruction("HALT");
		haltInstruction.setComment("Generated by the Noot Compiler ("+dateFormat.format(date)+")");
		
		currentBlock().push(haltInstruction);
		
		pushBlock();
		
		
		for(InstructionBlock block : instructionBlockStack)
		{
			for(Instruction instruction : block)
				System.out.print(instruction.toString());
		}
	}
	
	/**
	 * Declare.
	 *
	 * @param declaration the declaration
	 */
	public void declare(DeclarationNode declaration)
	{
		IdentifierNode in = declaration.getIdentifierNode();
		
		if(in == null) // Used for easy debugging an invalid AST
			throw new NullPointerException("Declaration on line " + declaration.getLine() + " does not have an identifer.");
		
		MemoryLocation ml = new MemoryLocation(declaration);
		memoryLocations.add(ml);
		
		currentBlock().push(new Instruction("PUSH","1","Declaring "+in.getNodeType()+" "+in.getText()));
	}
	
	/**
	 * Alloc helper register.
	 *
	 * @return the memory location
	 */
	public MemoryLocation allocHelperRegister()
	{
		currentBlock().push(new Instruction("PUSH","1","Pushing for helper register "));
		
		MemoryLocation ml = new MemoryLocation();
		memoryLocations.add(ml);
		
		return ml;
	}
	
	/**
	 * Address of identifier.
	 *
	 * @param node the node
	 * @return the string
	 * @throws GeneratorException the generator exception
	 */
	public String addressOfIdentifier(IdentifierNode node) throws GeneratorException
	{
		String result = null;
		int index = 0;
		
			for(MemoryLocation ml : memoryLocations)
			{
				DeclarationNode dc = ml.getDeclaration();
				
				if(dc != null && node.getDeclarationNode() == dc)
				{
					result = index + "[SB]";
				}
				
				index++;
			}
		
		if(result == null)
			throw new GeneratorException("MemoryLocation is not allocated");
		
		return result;

	}
	
	/**
	 * Address of memory location.
	 *
	 * @param ml the ml
	 * @return the string
	 * @throws GeneratorException the generator exception
	 */
	public String addressOfMemoryLocation(MemoryLocation ml) throws GeneratorException
	{
		String result = null;
		int index = 0;
		
		for(MemoryLocation mlr : memoryLocations)
		{
			if(mlr == ml) 
			{
				result = index + "[SB]";
			}
			
			index++;
		}
		
		if(result == null)
			throw new GeneratorException("MemoryLocation is not allocated");
		
		return result;
	}
	
	/**
	 * Current block.
	 *
	 * @return the instruction block
	 */
	public InstructionBlock currentBlock() {
		return instructionBlockStack.peek();
	}

}
